# -*- coding: utf-8 -*-
"""Oceanwaves.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gL0uIRhFrwVuXbwgwF1bi0ythOhXGA26
"""

import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import roc_auc_score, roc_curve
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer

# Read the data from the CSV file
file = '/content/sample_IrishSmartBuoy.csv'
data = pd.read_csv(file, skiprows=[1], parse_dates=['time'], index_col='time')

# Extract the significant wave height and convert cm to meters
series = data['SignificantWaveHeight'] / 100

# Resample to hourly data and take the mean
series = series.resample('H').mean()

# Define the threshold for large waves
THRESHOLD = 5

# Create lagged features and target variable
def create_lagged_features(series, n_lags):
    X = pd.DataFrame(index=series.index)
    for i in range(1, n_lags+1):
        X[f'Lag{i}'] = series.shift(i)
    return X

X = create_lagged_features(series, n_lags=24)
y = (series >= THRESHOLD).astype(int)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

# Impute missing values
imputer = SimpleImputer()
X_train = imputer.fit_transform(X_train)
X_test = imputer.transform(X_test)

# Train the Random Forest classifier
model = RandomForestClassifier(max_depth=5)
model.fit(X_train, y_train)

# Make probabilistic predictions
probs = model.predict_proba(X_test)[:, 1]

# Evaluate the model using ROC-AUC score
auc_score = roc_auc_score(y_test, probs)
print("ROC-AUC Score:", auc_score)

# Plot the ROC curve
fpr, tpr, thresholds = roc_curve(y_test, probs)
# (Add code to plot the ROC curve using fpr and tpr arrays)

import matplotlib.pyplot as plt

# Plot the ROC curve
plt.plot(fpr, tpr, label='ROC curve')
plt.plot([0, 1], [0, 1], 'k--', label='Random')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve')
plt.legend()
plt.show()

